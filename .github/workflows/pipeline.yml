name: CI

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.json'
      - '**/*.md'
      - '.github/workflows/**'
      - 'package.json'
      - 'package-lock.json'
      - 'public/**'

permissions:
  contents: read
  id-token: write
  checks: write
  pull-requests: write
  actions: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Install dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        id: cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        if: steps.cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Upload node_modules
        uses: actions/upload-artifact@v4
        with:
          name: node-modules
          path: node_modules

  lint-and-unit:
    name: Lint & Jest
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download node_modules
        uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Lint
        run: npm run lint

      - name: Unit tests
        run: npm run test -- --runInBand --ci --reporters=default --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT_DIR: reports/unit

      - name: Upload unit reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: reports/unit

  playwright:
    name: Playwright MCP
    runs-on: ubuntu-latest
    needs: [setup, lint-and-unit]
    timeout-minutes: 60
    env:
      MCP_CONFIG: tests/e2e/test-plan.mcp.md
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Install MCP runner
        run: npm install -g @playwright/test @modelcontextprotocol/cli

      - name: Run Playwright MCP workflows
        run: |
          mcp run playwright --config "$MCP_CONFIG" --output reports/mcp

      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: reports/mcp

  visual-regression:
    name: Visual & Responsive Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Build
        run: npm run build

      - name: Start server
        run: npx serve -s out -l 4173 &

      - name: Playwright visual regression
        uses: microsoft/playwright-github-action@v1
        with:
          args: npx playwright test tests/e2e/visual --reporter=list

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression
          path: playwright-report

  accessibility:
    name: Accessibility Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Install aXe
        run: npm install -g @axe-core/cli

      - name: Start dev server
        run: npm run dev &

      - name: Wait for server
        run: npx wait-on http://localhost:3000

      - name: Run accessibility audit
        run: axe http://localhost:3000 --exit

  summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: [lint-and-unit, playwright, visual-regression, accessibility]
    steps:
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          name: unit-test-reports
          path: reports/unit

      - name: Download Playwright artifacts
        uses: actions/download-artifact@v4
        with:
          name: playwright-artifacts
          path: reports/mcp
        continue-on-error: true

      - name: Download visual outputs
        uses: actions/download-artifact@v4
        with:
          name: visual-regression
          path: reports/visual
        continue-on-error: true

      - name: Generate summary
        run: |
          echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Unit & lint status: ${{ needs.lint-and-unit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Playwright MCP status: ${{ needs.playwright.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Visual regression status: ${{ needs.visual-regression.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility status: ${{ needs.accessibility.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts uploaded for detailed review." >> $GITHUB_STEP_SUMMARY

      - name: Publish unit report to PR
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: reports/unit/junit.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: "Unit Test Report"
